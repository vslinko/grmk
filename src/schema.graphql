schema {
  query: RootQuery
  mutation: RootMutation
}

input CreatePostInput {
  title: String
  clientMutationId: String!
}

type CreatePostPayload {
  post: Post
  clientMutationId: String!
}

input LikeInput {
  postId: ID
  weight: Int
  clientMutationId: String!
}

type LikePayload {
  post: Post
  clientMutationId: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String
  likeCount: Int
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  cursor: String!
}

type RootMutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  like(input: LikeInput!): LikePayload
}

type RootQuery {
  node(id: ID!): Node
  viewer: Viewer
}

type User implements Node {
  id: ID!
  username: String
  email: String
  posts: [Post]
}

type Viewer {
  posts(after: String, first: Int, before: String, last: Int): PostConnection
  users: [User]
  post(id: ID): Post
}
